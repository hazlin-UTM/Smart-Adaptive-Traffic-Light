/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body - Traffic Light System with TL1, TL2, TL3, TL4
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ----------------------------------------------------------*/
#include "main.h"
#include "stm32f4xx.h"
#include "stm32f4xx_hal.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
/* USER CODE END Includes */
/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef enum {
   SYSTEM_STATE_TL1_CYCLE,
   SYSTEM_STATE_TL2_CYCLE,
   SYSTEM_STATE_TL3_CYCLE,
   SYSTEM_STATE_TL4_CYCLE
} SystemState_TypeDef;
/* USER CODE END PTD */
/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define TL1_RED_GPIO_PORT    GPIOA
#define TL1_RED_GPIO_NUM     8
#define TL1_YELLOW_GPIO_PORT GPIOB
#define TL1_YELLOW_GPIO_NUM  5
#define TL1_GREEN_GPIO_PORT  GPIOB
#define TL1_GREEN_GPIO_NUM   4
#define TL2_RED_GPIO_PORT    GPIOA
#define TL2_RED_GPIO_NUM     10
#define TL2_YELLOW_GPIO_PORT GPIOA
#define TL2_YELLOW_GPIO_NUM  11
#define TL2_GREEN_GPIO_PORT  GPIOA
#define TL2_GREEN_GPIO_NUM   12
#define TL3_RED_GPIO_PORT    GPIOA
#define TL3_RED_GPIO_NUM     0
#define TL3_YELLOW_GPIO_PORT GPIOA
#define TL3_YELLOW_GPIO_NUM  1
#define TL3_GREEN_GPIO_PORT  GPIOA
#define TL3_GREEN_GPIO_NUM   4
#define TL4_RED_GPIO_PORT    GPIOA
#define TL4_RED_GPIO_NUM     6
#define TL4_YELLOW_GPIO_PORT GPIOA
#define TL4_YELLOW_GPIO_NUM  7
#define TL4_GREEN_GPIO_PORT  GPIOA
#define TL4_GREEN_GPIO_NUM   9
#define SENSOR_A_GPIO_PORT   GPIOC
#define SENSOR_A_GPIO_NUM    0
#define SENSOR_B_GPIO_PORT   GPIOC
#define SENSOR_B_GPIO_NUM    1
#define SENSOR_C_GPIO_PORT   GPIOC
#define SENSOR_C_GPIO_NUM    10
#define SENSOR_D_GPIO_PORT   GPIOC
#define SENSOR_D_GPIO_NUM    12
#define SENSOR_E_GPIO_PORT   GPIOC
#define SENSOR_E_GPIO_NUM    5
#define SENSOR_F_GPIO_PORT   GPIOC
#define SENSOR_F_GPIO_NUM    6
#define YELLOW_LIGHT_DURATION_MS            2000
#define RED_LIGHT_DELAY_MS                  2000
#define SENSOR_DEBOUNCE_MS                  50
#define SENSOR_POLLING_INTERVAL_MS          100
#define TL1_GREEN_DURATION_SENSOR_A_ONLY_MS 20000
#define TL1_GREEN_DURATION_A_AND_B_MS       45000
#define TL1_GREEN_DURATION_NO_INPUT_MS      5000
#define TL2_GREEN_DURATION_SENSOR_C_ONLY_MS 20000
#define TL2_GREEN_DURATION_C_AND_D_MS       45000
#define TL2_GREEN_DURATION_NO_INPUT_MS      5000
#define TL3_GREEN_DURATION_WITH_INPUT_MS    20000
#define TL3_GREEN_DURATION_NO_INPUT_MS      5000
#define TL4_GREEN_DURATION_WITH_INPUT_MS    20000
#define TL4_GREEN_DURATION_NO_INPUT_MS      5000
/* USER CODE END PD */
/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
/* USER CODE END PM */
/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN PV */
SystemState_TypeDef currentSystemState = SYSTEM_STATE_TL1_CYCLE;
/* USER CODE END PV */
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void GPIO_Init(void);
void Error_Handler(void);
#ifdef USE_FULL_ASSERT
void assert_failed(uint8_t *file, int line);
#endif
int ReadSensorA(void);
int ReadSensorB(void);
int ReadSensorC(void);
int ReadSensorD(void);
int ReadSensorE(void);
int ReadSensorF(void);
void SetTrafficLight(GPIO_TypeDef* red_port, int red_gpio_num,
                    GPIO_TypeDef* yellow_port, int yellow_gpio_num,
                    GPIO_TypeDef* green_port, int green_gpio_num,
                    int red_on, int yellow_on, int green_on);
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int ReadSensorA(void) {
   int active = !(SENSOR_A_GPIO_PORT->IDR & (1 << SENSOR_A_GPIO_NUM));
   HAL_Delay(SENSOR_DEBOUNCE_MS);
   active = !(SENSOR_A_GPIO_PORT->IDR & (1 << SENSOR_A_GPIO_NUM));
   return active;
}
int ReadSensorB(void) {
   int active = !(SENSOR_B_GPIO_PORT->IDR & (1 << SENSOR_B_GPIO_NUM));
   HAL_Delay(SENSOR_DEBOUNCE_MS);
   active = !(SENSOR_B_GPIO_PORT->IDR & (1 << SENSOR_B_GPIO_NUM));
   return active;
}
int ReadSensorC(void) {
   int active = !(SENSOR_C_GPIO_PORT->IDR & (1 << SENSOR_C_GPIO_NUM));
   HAL_Delay(SENSOR_DEBOUNCE_MS);
   active = !(SENSOR_C_GPIO_PORT->IDR & (1 << SENSOR_C_GPIO_NUM));
   return active;
}
int ReadSensorD(void) {
   int active = !(SENSOR_D_GPIO_PORT->IDR & (1 << SENSOR_D_GPIO_NUM));
   HAL_Delay(SENSOR_DEBOUNCE_MS);
   active = !(SENSOR_D_GPIO_PORT->IDR & (1 << SENSOR_D_GPIO_NUM));
   return active;
}
int ReadSensorE(void) {
   int active = !(SENSOR_E_GPIO_PORT->IDR & (1 << SENSOR_E_GPIO_NUM));
   HAL_Delay(SENSOR_DEBOUNCE_MS);
   active = !(SENSOR_E_GPIO_PORT->IDR & (1 << SENSOR_E_GPIO_NUM));
   return active;
}
int ReadSensorF(void) {
   int active = !(SENSOR_F_GPIO_PORT->IDR & (1 << SENSOR_F_GPIO_NUM));
   HAL_Delay(SENSOR_DEBOUNCE_MS);
   active = !(SENSOR_F_GPIO_PORT->IDR & (1 << SENSOR_F_GPIO_NUM));
   return active;
}
void SetTrafficLight(GPIO_TypeDef* red_port, int red_gpio_num,
                    GPIO_TypeDef* yellow_port, int yellow_gpio_num,
                    GPIO_TypeDef* green_port, int green_gpio_num,
                    int red_on, int yellow_on, int green_on) {
   if (red_on) red_port->BSRR = (1 << red_gpio_num);
   else red_port->BSRR = (1 << (red_gpio_num + 16));
   if (yellow_on) yellow_port->BSRR = (1 << yellow_gpio_num);
   else yellow_port->BSRR = (1 << (yellow_gpio_num + 16));
   if (green_on) green_port->BSRR = (1 << green_gpio_num);
   else green_port->BSRR = (1 << (green_gpio_num + 16));
}
/* USER CODE END 0 */
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 /* USER CODE BEGIN 1 */
 /* USER CODE END 1 */
 /* MCU Configuration--------------------------------------------------------*/
 HAL_Init();
 /* USER CODE BEGIN Init */
 /* USER CODE END Init */
 SystemClock_Config();
 HAL_SYSTICK_Config(SystemCoreClock / 1000);
 HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 GPIO_Init();
 /* USER CODE BEGIN 2 */
 SetTrafficLight(TL1_RED_GPIO_PORT, TL1_RED_GPIO_NUM, TL1_YELLOW_GPIO_PORT, TL1_YELLOW_GPIO_NUM, TL1_GREEN_GPIO_PORT, TL1_GREEN_GPIO_NUM, 1, 0, 0);
 SetTrafficLight(TL2_RED_GPIO_PORT, TL2_RED_GPIO_NUM, TL2_YELLOW_GPIO_PORT, TL2_YELLOW_GPIO_NUM, TL2_GREEN_GPIO_PORT, TL2_GREEN_GPIO_NUM, 1, 0, 0);
 SetTrafficLight(TL3_RED_GPIO_PORT, TL3_RED_GPIO_NUM, TL3_YELLOW_GPIO_PORT, TL3_YELLOW_GPIO_NUM, TL3_GREEN_GPIO_PORT, TL3_GREEN_GPIO_NUM, 1, 0, 0);
 SetTrafficLight(TL4_RED_GPIO_PORT, TL4_RED_GPIO_NUM, TL4_YELLOW_GPIO_PORT, TL4_YELLOW_GPIO_NUM, TL4_GREEN_GPIO_PORT, TL4_GREEN_GPIO_NUM, 1, 0, 0);
 /* USER CODE END 2 */
 /* Infinite loop */
 /* USER CODE BEGIN WHILE */
 while (1)
 {
   // Local variables for sensor states, shared across cycles
   int sensorA_active, sensorB_active, sensorC_active, sensorD_active, sensorE_active, sensorF_active;
   int tl_green_duration;
   int proceed_to_green_phase;

   if (currentSystemState == SYSTEM_STATE_TL1_CYCLE)
   {
       // Set other traffic lights to red
       SetTrafficLight(TL2_RED_GPIO_PORT, TL2_RED_GPIO_NUM, TL2_YELLOW_GPIO_PORT, TL2_YELLOW_GPIO_NUM, TL2_GREEN_GPIO_PORT, TL2_GREEN_GPIO_NUM, 1, 0, 0);
       SetTrafficLight(TL3_RED_GPIO_PORT, TL3_RED_GPIO_NUM, TL3_YELLOW_GPIO_PORT, TL3_YELLOW_GPIO_NUM, TL3_GREEN_GPIO_PORT, TL3_GREEN_GPIO_NUM, 1, 0, 0);
       SetTrafficLight(TL4_RED_GPIO_PORT, TL4_RED_GPIO_NUM, TL4_YELLOW_GPIO_PORT, TL4_YELLOW_GPIO_NUM, TL4_GREEN_GPIO_PORT, TL4_GREEN_GPIO_NUM, 1, 0, 0);

       SetTrafficLight(TL1_RED_GPIO_PORT, TL1_RED_GPIO_NUM, TL1_YELLOW_GPIO_PORT, TL1_YELLOW_GPIO_NUM, TL1_GREEN_GPIO_PORT, TL1_GREEN_GPIO_NUM, 1, 0, 0);
       proceed_to_green_phase = 0;
       while(!proceed_to_green_phase) {
           sensorA_active = ReadSensorA();
           sensorB_active = ReadSensorB();
           sensorC_active = ReadSensorC();
           sensorD_active = ReadSensorD();
           sensorE_active = ReadSensorE();
           sensorF_active = ReadSensorF();

           if (sensorA_active && sensorB_active) {
               tl_green_duration = TL1_GREEN_DURATION_A_AND_B_MS;
               proceed_to_green_phase = 1;
           } else if (sensorA_active) {
               tl_green_duration = TL1_GREEN_DURATION_SENSOR_A_ONLY_MS;
               proceed_to_green_phase = 1;
           } else if (sensorC_active) { // Check for TL2 request
               currentSystemState = SYSTEM_STATE_TL2_CYCLE;
               break;
           } else if (sensorE_active) { // Check for TL3 request
               currentSystemState = SYSTEM_STATE_TL3_CYCLE;
               break;
           } else if (sensorF_active) { // Check for TL4 request
               currentSystemState = SYSTEM_STATE_TL4_CYCLE;
               break;
           } else {
               tl_green_duration = TL1_GREEN_DURATION_NO_INPUT_MS;
               proceed_to_green_phase = 1;
           }
           HAL_Delay(SENSOR_POLLING_INTERVAL_MS);
       }
       if (currentSystemState != SYSTEM_STATE_TL1_CYCLE) {
           continue;
       }
       SetTrafficLight(TL1_RED_GPIO_PORT, TL1_RED_GPIO_NUM, TL1_YELLOW_GPIO_PORT, TL1_YELLOW_GPIO_NUM, TL1_GREEN_GPIO_PORT, TL1_GREEN_GPIO_NUM, 0, 0, 1);
       HAL_Delay(tl_green_duration);
       SetTrafficLight(TL1_RED_GPIO_PORT, TL1_RED_GPIO_NUM, TL1_YELLOW_GPIO_PORT, TL1_YELLOW_GPIO_NUM, TL1_GREEN_GPIO_PORT, TL1_GREEN_GPIO_NUM, 0, 1, 0);
       HAL_Delay(YELLOW_LIGHT_DURATION_MS);
       SetTrafficLight(TL1_RED_GPIO_PORT, TL1_RED_GPIO_NUM, TL1_YELLOW_GPIO_PORT, TL1_YELLOW_GPIO_NUM, TL1_GREEN_GPIO_PORT, TL1_GREEN_GPIO_NUM, 1, 0, 0);
       currentSystemState = SYSTEM_STATE_TL2_CYCLE;
       HAL_Delay(RED_LIGHT_DELAY_MS);
   }
   else if (currentSystemState == SYSTEM_STATE_TL2_CYCLE)
   {
       // Set other traffic lights to red
       SetTrafficLight(TL1_RED_GPIO_PORT, TL1_RED_GPIO_NUM, TL1_YELLOW_GPIO_PORT, TL1_YELLOW_GPIO_NUM, TL1_GREEN_GPIO_PORT, TL1_GREEN_GPIO_NUM, 1, 0, 0);
       SetTrafficLight(TL3_RED_GPIO_PORT, TL3_RED_GPIO_NUM, TL3_YELLOW_GPIO_PORT, TL3_YELLOW_GPIO_NUM, TL3_GREEN_GPIO_PORT, TL3_GREEN_GPIO_NUM, 1, 0, 0);
       SetTrafficLight(TL4_RED_GPIO_PORT, TL4_RED_GPIO_NUM, TL4_YELLOW_GPIO_PORT, TL4_YELLOW_GPIO_NUM, TL4_GREEN_GPIO_PORT, TL4_GREEN_GPIO_NUM, 1, 0, 0);

       SetTrafficLight(TL2_RED_GPIO_PORT, TL2_RED_GPIO_NUM, TL2_YELLOW_GPIO_PORT, TL2_YELLOW_GPIO_NUM, TL2_GREEN_GPIO_PORT, TL2_GREEN_GPIO_NUM, 1, 0, 0);
       proceed_to_green_phase = 0;
       while(!proceed_to_green_phase) {
           sensorA_active = ReadSensorA();
           sensorB_active = ReadSensorB();
           sensorC_active = ReadSensorC();
           sensorD_active = ReadSensorD();
           sensorE_active = ReadSensorE();
           sensorF_active = ReadSensorF();

           if (sensorC_active && sensorD_active) {
               tl_green_duration = TL2_GREEN_DURATION_C_AND_D_MS;
               proceed_to_green_phase = 1;
           } else if (sensorC_active) {
               tl_green_duration = TL2_GREEN_DURATION_SENSOR_C_ONLY_MS;
               proceed_to_green_phase = 1;
           } else if (sensorE_active) { // Check for TL3 request
               currentSystemState = SYSTEM_STATE_TL3_CYCLE;
               break;
           } else if (sensorF_active) { // Check for TL4 request
               currentSystemState = SYSTEM_STATE_TL4_CYCLE;
               break;
           } else if (sensorA_active) { // Check for TL1 request
               currentSystemState = SYSTEM_STATE_TL1_CYCLE;
               break;
           } else {
               tl_green_duration = TL2_GREEN_DURATION_NO_INPUT_MS;
               proceed_to_green_phase = 1;
           }
           HAL_Delay(SENSOR_POLLING_INTERVAL_MS);
       }
       if (currentSystemState != SYSTEM_STATE_TL2_CYCLE) {
           continue;
       }
       SetTrafficLight(TL2_RED_GPIO_PORT, TL2_RED_GPIO_NUM, TL2_YELLOW_GPIO_PORT, TL2_YELLOW_GPIO_NUM, TL2_GREEN_GPIO_PORT, TL2_GREEN_GPIO_NUM, 0, 0, 1);
       HAL_Delay(tl_green_duration);
       SetTrafficLight(TL2_RED_GPIO_PORT, TL2_RED_GPIO_NUM, TL2_YELLOW_GPIO_PORT, TL2_YELLOW_GPIO_NUM, TL2_GREEN_GPIO_PORT, TL2_GREEN_GPIO_NUM, 0, 1, 0);
       HAL_Delay(YELLOW_LIGHT_DURATION_MS);
       SetTrafficLight(TL2_RED_GPIO_PORT, TL2_RED_GPIO_NUM, TL2_YELLOW_GPIO_PORT, TL2_YELLOW_GPIO_NUM, TL2_GREEN_GPIO_PORT, TL2_GREEN_GPIO_NUM, 1, 0, 0);
       currentSystemState = SYSTEM_STATE_TL3_CYCLE;
       HAL_Delay(RED_LIGHT_DELAY_MS);
   }
   else if (currentSystemState == SYSTEM_STATE_TL3_CYCLE)
   {
       // Set other traffic lights to red
       SetTrafficLight(TL1_RED_GPIO_PORT, TL1_RED_GPIO_NUM, TL1_YELLOW_GPIO_PORT, TL1_YELLOW_GPIO_NUM, TL1_GREEN_GPIO_PORT, TL1_GREEN_GPIO_NUM, 1, 0, 0);
       SetTrafficLight(TL2_RED_GPIO_PORT, TL2_RED_GPIO_NUM, TL2_YELLOW_GPIO_PORT, TL2_YELLOW_GPIO_NUM, TL2_GREEN_GPIO_PORT, TL2_GREEN_GPIO_NUM, 1, 0, 0);
       SetTrafficLight(TL4_RED_GPIO_PORT, TL4_RED_GPIO_NUM, TL4_YELLOW_GPIO_PORT, TL4_YELLOW_GPIO_NUM, TL4_GREEN_GPIO_PORT, TL4_GREEN_GPIO_NUM, 1, 0, 0);

       SetTrafficLight(TL3_RED_GPIO_PORT, TL3_RED_GPIO_NUM, TL3_YELLOW_GPIO_PORT, TL3_YELLOW_GPIO_NUM, TL3_GREEN_GPIO_PORT, TL3_GREEN_GPIO_NUM, 1, 0, 0);
       proceed_to_green_phase = 0;
       while(!proceed_to_green_phase) {
           sensorA_active = ReadSensorA();
           sensorB_active = ReadSensorB();
           sensorC_active = ReadSensorC();
           sensorD_active = ReadSensorD();
           sensorE_active = ReadSensorE();
           sensorF_active = ReadSensorF();

           if (sensorE_active) {
               proceed_to_green_phase = 1;
               tl_green_duration = TL3_GREEN_DURATION_WITH_INPUT_MS;
           } else if (sensorF_active) { // Check for TL4 request
               currentSystemState = SYSTEM_STATE_TL4_CYCLE;
               break;
           } else if (sensorA_active) { // Check for TL1 request
               currentSystemState = SYSTEM_STATE_TL1_CYCLE;
               break;
           } else if (sensorC_active) { // Check for TL2 request
               currentSystemState = SYSTEM_STATE_TL2_CYCLE;
               break;
           } else {
               proceed_to_green_phase = 1;
               tl_green_duration = TL3_GREEN_DURATION_NO_INPUT_MS;
           }
           HAL_Delay(SENSOR_POLLING_INTERVAL_MS);
       }
       if (currentSystemState != SYSTEM_STATE_TL3_CYCLE) {
           continue;
       }
       SetTrafficLight(TL3_RED_GPIO_PORT, TL3_RED_GPIO_NUM, TL3_YELLOW_GPIO_PORT, TL3_YELLOW_GPIO_NUM, TL3_GREEN_GPIO_PORT, TL3_GREEN_GPIO_NUM, 0, 0, 1);
       HAL_Delay(tl_green_duration);
       SetTrafficLight(TL3_RED_GPIO_PORT, TL3_RED_GPIO_NUM, TL3_YELLOW_GPIO_PORT, TL3_YELLOW_GPIO_NUM, TL3_GREEN_GPIO_PORT, TL3_GREEN_GPIO_NUM, 0, 1, 0);
       HAL_Delay(YELLOW_LIGHT_DURATION_MS);
       SetTrafficLight(TL3_RED_GPIO_PORT, TL3_RED_GPIO_NUM, TL3_YELLOW_GPIO_PORT, TL3_YELLOW_GPIO_NUM, TL3_GREEN_GPIO_PORT, TL3_GREEN_GPIO_NUM, 1, 0, 0);
       currentSystemState = SYSTEM_STATE_TL4_CYCLE;
       HAL_Delay(RED_LIGHT_DELAY_MS);
   }
   else if (currentSystemState == SYSTEM_STATE_TL4_CYCLE)
   {
       // Set other traffic lights to red
       SetTrafficLight(TL1_RED_GPIO_PORT, TL1_RED_GPIO_NUM, TL1_YELLOW_GPIO_PORT, TL1_YELLOW_GPIO_NUM, TL1_GREEN_GPIO_PORT, TL1_GREEN_GPIO_NUM, 1, 0, 0);
       SetTrafficLight(TL2_RED_GPIO_PORT, TL2_RED_GPIO_NUM, TL2_YELLOW_GPIO_PORT, TL2_YELLOW_GPIO_NUM, TL2_GREEN_GPIO_PORT, TL2_GREEN_GPIO_NUM, 1, 0, 0);
       SetTrafficLight(TL3_RED_GPIO_PORT, TL3_RED_GPIO_NUM, TL3_YELLOW_GPIO_PORT, TL3_YELLOW_GPIO_NUM, TL3_GREEN_GPIO_PORT, TL3_GREEN_GPIO_NUM, 1, 0, 0);

       SetTrafficLight(TL4_RED_GPIO_PORT, TL4_RED_GPIO_NUM, TL4_YELLOW_GPIO_PORT, TL4_YELLOW_GPIO_NUM, TL4_GREEN_GPIO_PORT, TL4_GREEN_GPIO_NUM, 1, 0, 0);
       proceed_to_green_phase = 0;
       while(!proceed_to_green_phase) {
           sensorA_active = ReadSensorA();
           sensorB_active = ReadSensorB();
           sensorC_active = ReadSensorC();
           sensorD_active = ReadSensorD();
           sensorE_active = ReadSensorE();
           sensorF_active = ReadSensorF();

           if (sensorF_active) {
               tl_green_duration = TL4_GREEN_DURATION_WITH_INPUT_MS;
               proceed_to_green_phase = 1;
           } else if (sensorA_active) { // Check for TL1 request
               currentSystemState = SYSTEM_STATE_TL1_CYCLE;
               break;
           } else if (sensorC_active) { // Check for TL2 request
               currentSystemState = SYSTEM_STATE_TL2_CYCLE;
               break;
           } else if (sensorE_active) { // Check for TL3 request
               currentSystemState = SYSTEM_STATE_TL3_CYCLE;
               break;
           } else {
               tl_green_duration = TL4_GREEN_DURATION_NO_INPUT_MS;
               proceed_to_green_phase = 1;
           }
           HAL_Delay(SENSOR_POLLING_INTERVAL_MS);
       }
       if (currentSystemState != SYSTEM_STATE_TL4_CYCLE) {
           continue;
       }
       SetTrafficLight(TL4_RED_GPIO_PORT, TL4_RED_GPIO_NUM, TL4_YELLOW_GPIO_PORT, TL4_YELLOW_GPIO_NUM, TL4_GREEN_GPIO_PORT, TL4_GREEN_GPIO_NUM, 0, 0, 1);
       HAL_Delay(tl_green_duration);
       SetTrafficLight(TL4_RED_GPIO_PORT, TL4_RED_GPIO_NUM, TL4_YELLOW_GPIO_PORT, TL4_YELLOW_GPIO_NUM, TL4_GREEN_GPIO_PORT, TL4_GREEN_GPIO_NUM, 0, 1, 0);
       HAL_Delay(YELLOW_LIGHT_DURATION_MS);
       SetTrafficLight(TL4_RED_GPIO_PORT, TL4_RED_GPIO_NUM, TL4_YELLOW_GPIO_PORT, TL4_YELLOW_GPIO_NUM, TL4_GREEN_GPIO_PORT, TL4_GREEN_GPIO_NUM, 1, 0, 0);
       currentSystemState = SYSTEM_STATE_TL1_CYCLE;
       HAL_Delay(RED_LIGHT_DELAY_MS);
   }
 }
 /* USER CODE END WHILE */
 /* USER CODE BEGIN 3 */
 /* USER CODE END 3 */
}
void SystemClock_Config(void)
{
   RCC->CR |= RCC_CR_HSION;
   while (!(RCC->CR & RCC_CR_HSIRDY));
   RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
   RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLP | RCC_PLLCFGR_PLLQ);
   RCC->PLLCFGR |= (16 << RCC_PLLCFGR_PLLM_Pos);
   RCC->PLLCFGR |= (360 << RCC_PLLCFGR_PLLN_Pos);
   RCC->PLLCFGR |= (9 << RCC_PLLCFGR_PLLQ_Pos);
   RCC->CR |= RCC_CR_PLLON;
   while (!(RCC->CR & RCC_CR_PLLRDY));
   RCC->APB1ENR |= RCC_APB1ENR_PWREN;
   PWR->CR |= PWR_CR_ODEN;
   while (!(PWR->CSR & PWR_CSR_ODRDY));
   PWR->CR |= PWR_CR_VOS;
   FLASH->ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_5WS;
   RCC->CFGR &= ~RCC_CFGR_HPRE;
   RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
   RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
   RCC->CFGR |= RCC_CFGR_SW_PLL;
   while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
   SystemCoreClockUpdate();
}
static void GPIO_Init(void)
{
   // Enable GPIO Peripheral Clocks for GPIOA, GPIOB, and GPIOC
	RCC->AHB1ENR |= 0x07; // Enable GPIOA, GPIOB, and GPIOC clocks
   // --- Configure GPIOA Pins (TL1 RED, TL2 RED/YELLOW/GREEN, TL3 RED/YELLOW/GREEN, TL4 RED/YELLOW/GREEN) ---
	GPIOA->MODER = 0x295555A5;
   // Configure OTYPER to Push-pull output (0) for all GPIOA traffic light pins
	GPIOA->OTYPER = 0x00000000; // Sets all 16 pins of GPIOA to Push-pull output type
   // Configure PUPDR (Pull-up/Pull-down) for all GPIOA traffic light pins (No pull-up/down for outputs (00))
	GPIOA->PUPDR = 0x40000000; // Sets PA15 to Pull-up, all others to No Pull

   // --- Configure GPIOB Pins (TL1 Yellow and TL1 Green LEDs) ---
   GPIOB->MODER = 0x00000500; // Configures PB4 and PB5 as Outputs (01), and all other GPIOB pins as Inputs (00)
   // Configure OTYPER to Push-pull output (0) for TL1 Yellow and TL1 Green pins
   GPIOB->OTYPER = 0x00000000;
   // Configure PUPDR (No pull-up/down for outputs (00))
   GPIOB->PUPDR = 0x00000000;
   // --- Configure GPIOC Pins (Sensors A, B, C, D, E, F) ---
   GPIOC->MODER = 0x00000000;
   // Configure OTYPER for all sensor pins (Push-pull for inputs)
   GPIOC->OTYPER = 0x00000000;
   // Configure PUPDR to Pull-up (01) for all sensor pins (assuming active-low sensors)
   GPIOC->PUPDR = 0x01101405;
}
void Error_Handler(void)
{
 __disable_irq();
 while (1)
 {
 }
}
#ifdef USE_FULL_ASSERT
void assert_failed(uint8_t *file, int line)
{
}
#endif
